---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-secret
type: Opaque
stringData:
  RABBITMQ_DEFAULT_USER: devuser
  RABBITMQ_DEFAULT_PASS: devpass123
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  type: LoadBalancer
  ports:
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: mgmt
      port: 15672
      targetPort: 15672
  selector:
    app: rabbitmq
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5672
              name: amqp
            - containerPort: 15672
              name: mgmt
          envFrom:
            - secretRef:
                name: rabbitmq-secret
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: "500m"
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /var/lib/rabbitmq/mnesia
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi   
---
apiVersion: v1
kind: Secret
metadata:
  name: mssql-secret
type: Opaque
stringData:
  SA_PASSWORD: "P@ssw0rd1234!" 
  MSSQL_CONN: "Server=sqlserver;Database=OrdersDb;User Id=sa;Password=P@ssw0rd1234!;TrustServerCertificate=True"  
---
apiVersion: v1
kind: Service
metadata:
  name: sqlserver
  labels:
    app: sqlserver
spec:
  type: ClusterIP
  ports:
    - name: tds
      port: 1433
      targetPort: 1433
  selector:
    app: sqlserver
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sqlserver
spec:
  serviceName: sqlserver
  replicas: 1
  selector:
    matchLabels:
      app: sqlserver
  template:
    metadata:
      labels:
        app: sqlserver
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001   # default mssql user in the container
        fsGroup: 10001     # ensure volume write access
      containers:
        - name: mssql
          image: mcr.microsoft.com/mssql/server:2022-latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1433
              name: tds
          env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_PID
              value: "Developer"
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mssql-secret
                  key: SA_PASSWORD
          resources:
            # SQL Server needs >= 2Gi to start reliably
            requests:
              cpu: 500m
              memory: 2Gi
            limits:
              cpu: "2"
              memory: 3Gi
          volumeMounts:
            - name: data
              mountPath: /var/opt/mssql
          # SQL Server cold starts can be slow
          startupProbe:
            tcpSocket:
              port: 1433
            periodSeconds: 10
            failureThreshold: 30   # ~5 minutes max for first boot
          readinessProbe:
            tcpSocket:
              port: 1433
            periodSeconds: 10
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: 1433
            initialDelaySeconds: 60
            periodSeconds: 20
            failureThreshold: 6
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi